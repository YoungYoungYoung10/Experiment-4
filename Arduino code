/*
  Button LED

  This example creates a BLE peripheral with service that contains a
  characteristic to control an LED and another characteristic that
  represents the state of the button.

  The circuit:
  - Arduino MKR WiFi 1010, Arduino Uno WiFi Rev2 board, Arduino Nano 33 IoT,
    Arduino Nano 33 BLE, or Arduino Nano 33 BLE Sense board.
  - Button connected to pin 4

  You can use a generic BLE central app, like LightBlue (iOS and Android) or
  nRF Connect (Android), to interact with the services and characteristics
  created in this sketch.

  This example code is in the public domain.
*/
#include <ArduinoBLE.h>

const int buttonPin = A0; 

BLEService buttonService("19B10010-E8F2-537E-4F6C-D104768A1214"); 
BLEByteCharacteristic buttonCharacteristic("19B10012-E8F2-537E-4F6C-D104768A1214", BLERead | BLENotify);

void setup() {
  Serial.begin(9600);

  pinMode(buttonPin, INPUT); 

  
  if (!BLE.begin()) {
    Serial.println("starting BLE failed!");

    while (1);
  }

 
  BLE.setLocalName("Button");
  BLE.setAdvertisedService(buttonService);

  buttonService.addCharacteristic(buttonCharacteristic);


  BLE.addService(buttonService);

  
  buttonCharacteristic.writeValue(0);

  
  BLE.advertise();

  Serial.println("Bluetooth device active, waiting for connections...");
}

void loop() {
  BLE.poll();

  int buttonValue = digitalRead(buttonPin);
  boolean buttonChanged = false;

  if (buttonCharacteristic.value() != buttonValue){
    buttonChanged = true;
  }

  if (buttonChanged) {
    buttonCharacteristic.writeValue(buttonValue);
    Serial.println(buttonValue);
  }
}
